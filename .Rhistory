head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
ts_0 <- ts_sh[-(1:2)]
ts_1 <- ts_sh[-(57:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
acf(ts_sh, lag.max = 2, plot = FALSE)
ts_0 <- ts_sh[-(1:3)]
ts_1 <- ts_sh[-(56:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
acf(ts_sh, lag.max = 5, plot = FALSE)
ts_0 <- ts_sh[-(1:4)]
ts_1 <- ts_sh[-(55:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
ts_0 <- ts_sh[-(1:5)]
ts_1 <- ts_sh[-(54:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
ts_0 <- ts_sh[-(1:5)]
ts_1 <- ts_sh[-(54:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)*(57/58)
ts_0 <- ts_sh[-(1:5)]
ts_1 <- ts_sh[-(54:58)]
head(cbind(ts_1, ts_0))
cor(ts_1,ts_0)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 100, mean = 5, sd = 0.2)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 100, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 20)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 1000, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 100, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 1, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 2, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 3, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 3, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 3, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 30, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 1000, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 100, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 1000, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
set.seed(123)
## random normal variates
GWN <- rnorm(n = 100, mean = 5, sd = 0.2)
acf(GWN, main = "", lag.max = 30)
knitr::opts_chunk$set(warning = FALSE,
message = FALSE)
library(tidyverse)
library(broom)
library(forecast)
library(zoo)
library(gridExtra)
library(ggplot2)
#library(ggfortify)
library(gridExtra)
library(ggpubr)
library(zoo)
library(forecast)
library(fpp2)
library(ggpubr)
df1 <- read.table(text='
Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
2015 110 115  92 120 125 103 132 136 114 139 143 119
2016 150 156 130 169 166 142 170 173 151 180 184 163
', header=T)
library(reshape)
df2 <- melt(df1)
df2$time <- paste0("01-",df2$variable,'-',rep(rownames(df1), ncol(df1)))
df2$time <- as.Date(df2$time, "%d-%b-%Y")
( df2 <- df2[order(df2$time),] )
( salests <- ts(df2$value, frequency=12, start = c(2015,1)) )
library(ggfortify)
library(forecast)
autoplot(salests)  +
forecast::autolayer(ma(salests, 5), series="5 Moving Average")
install.packages(pkgs = "ggstatsplot")
#loading needed libraries
library(ggstatsplot)
# for reproducibility
set.seed(123)
# plot
ggstatsplot::ggbetweenstats(
data = iris,
x = Species,
y = Sepal.Length,
title = "Distribution of sepal length across Iris species",
messages = FALSE
) + # further modification outside of ggstatsplot
ggplot2::coord_cartesian(ylim = c(3, 8)) +
ggplot2::scale_y_continuous(breaks = seq(3, 8, by = 1))
ggstatsplot::ggscatterstats(
data = ggplot2::msleep,
x = sleep_rem,
y = awake,
xlab = "REM sleep (in hours)",
ylab = "Amount of time spent awake (in hours)",
title = "Understanding mammalian sleep",
messages = FALSE
)
library("jpeg")
reduce_dimensions <- function(input_file,ouput_file,width,height) {
img <- readJPEG(input_file)
nrows = nrow(img);
ncols = ncol(img);
rem_rows = (nrows - width)%% 2
rem_cols = (ncols - height)%% 2
if((width %% 2) == 0) {
remov_rows = ((nrows/2) - ( width/2)+1): ((nrows/2) + ( width/2))
} else {
remov_rows = trunc(((nrows/2) - ( width/2)+1)): trunc(((nrows/2) +( width/2)))
}
if((height %% 2) == 0) {
remov_cols = ((ncols/2) - (height/2)+1): ((ncols/2) + (height/2))
} else {
remov_cols = trunc(((ncols/2)) - (height/2)+1): trunc(((ncols/2)) + (height/2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[,, i] = img[,, i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg","new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character
#' @param output_file character
#'
#' @return an array of image
#' @export
#' @examples
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file,ouput_file,width,height) {
img <- readJPEG(input_file)
nrows = nrow(img);
ncols = ncol(img);
rem_rows = (nrows - width)%% 2
rem_cols = (ncols - height)%% 2
if((width %% 2) == 0) {
remov_rows = ((nrows/2) - ( width/2)+1): ((nrows/2) + ( width/2))
} else {
remov_rows = trunc(((nrows/2) - ( width/2)+1)): trunc(((nrows/2) +( width/2)))
}
if((height %% 2) == 0) {
remov_cols = ((ncols/2) - (height/2)+1): ((ncols/2) + (height/2))
} else {
remov_cols = trunc(((ncols/2)) - (height/2)+1): trunc(((ncols/2)) + (height/2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[,, i] = img[,, i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg","new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character
#' @param output_file character
#'
#' @return an array of image
#' @export
#' @examples
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file, ouput_file, width, height) {
img <- readJPEG(input_file)
nrows = nrow(img)
ncols = ncol(img)
rem_rows = (nrows - width) %% 2
rem_cols = (ncols - height) %% 2
if ((width %% 2) == 0) {
remov_rows = ((nrows / 2) - (width / 2) + 1):((nrows / 2) + (width / 2))
} else {
remov_rows = trunc(((nrows / 2) - (width / 2) + 1)):trunc(((nrows / 2) +
(width / 2)))
}
if ((height %% 2) == 0) {
remov_cols = ((ncols / 2) - (height / 2) + 1):((ncols / 2) + (height / 2))
} else {
remov_cols = trunc(((ncols / 2)) - (height / 2) + 1):trunc(((ncols / 2)) + (height /
2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[, , i] = img[, , i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg", "new_image.jpg", 297, 200))
#' A function to reduce the dimension of a give image by removing vertical and horizontal seams
#'
#' A new image with the modified width and height will be created
#'
#' @param input_file character, the file path for the input file
#' @param output_file character, the file path for the output file
#' @param width integer, the width of the reduced image
#' @param height integer, the height of the reduce image
#' @return an array of image
#' @export
#' @examples reduce_dimensions("mandrill.jpg", "new_image.jpg", 297, 200)
#' reduce_dimensions(input_file,output_file,width,height)
library("jpeg")
reduce_dimensions <- function(input_file, ouput_file, width, height) {
img <- readJPEG(input_file)
nrows = nrow(img)
ncols = ncol(img)
rem_rows = (nrows - width) %% 2
rem_cols = (ncols - height) %% 2
if ((width %% 2) == 0) {
remov_rows = ((nrows / 2) - (width / 2) + 1):((nrows / 2) + (width / 2))
} else {
remov_rows = trunc(((nrows / 2) - (width / 2) + 1)):trunc(((nrows / 2) +
(width / 2)))
}
if ((height %% 2) == 0) {
remov_cols = ((ncols / 2) - (height / 2) + 1):((ncols / 2) + (height / 2))
} else {
remov_cols = trunc(((ncols / 2)) - (height / 2) + 1):trunc(((ncols / 2)) + (height /
2))
}
new_img = array(dim = c(width, height, dim(img)[3]))
for (i in 1:dim(img)[3]) {
new_img[, , i] = img[, , i][remov_rows, remov_cols]
}
writeJPEG(new_img, target = ouput_file)
return(new_img)
}
dim(reduce_dimensions("mandrill.jpg", "images/reduced.jpg", 297, 200))
knitr::opts_chunk$set(echo = TRUE)
knitr::include_graphics(c('linear_vs_logistic_regression.jpg'))
library(dplyr)
library(dummies)
require(foreign)
require(ggplot2)
require(MASS)
require(Hmisc)
require(reshape2)
library(glmnet)
options(warn=-1) #suppress warnings
bank_additional_full <- read.csv("bank-additional-full.csv",header=TRUE)
install.packages("AER", lib="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(reticulate)
use_python("/user/local/bin/pyhton")
library(reticulate)
use_python("/user/local/bin/pyhton")
Sys.which("python")
library(reticulate)
use_python("/user/local/bin/pyhton")
Sys.which("python")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::conda_create("r-reticulate")
library(reticulate)
use_python("/user/local/bin/pyhton")
reticulate::use_condaenv("r-reticulate", required = TRUE)
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
use_python("F:/Anaconda3", required = TRUE)
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("/usr/bin/python3")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
py_config()
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
use_virtualenv("r-reticulate")
reticulate::use_python("//anaconda3/bin/python")
knitr::opts_chunk$set(collapse = TRUE)
library("reticulate")
use_python('<PATH_TO_PYTHON>', required = TRUE))
htmltools::includeHTML("data/map.html")
[s](data/map_img)
[s]('data/map_img')
[!]('data/map_img')
![Drag Racing](data/map_img)
![image info](data/map_img)
![image](data/map_img)
![image](data/map_img.png)
![image](map_img.png)
print(';asd')
![image](map_img.png)
remove.packages('gganimate')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = T)
library(broom, quietly = T)
library(tree, quietly = T)
ift_data < read_excel(path = "data/ift_data.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = T)
library(broom, quietly = T)
library(tree, quietly = T)
library(readxl)
ift_data < read_excel(path = "data/ift_data.xlsx")
setwd("~/Modeling_IFT_for_heavy_oil_emulsion")
ift_data < read_excel(path = "data/ift_data.xlsx")
setwd("~/Modeling_IFT_for_heavy_oil_emulsion")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse, quietly = T)
library(broom, quietly = T)
library(tree, quietly = T)
library(readxl)
ift_data < read_excel(path = "data/ift_data.xlsx")
ift_dat < read_excel(path = "data/ift_data.xlsx")
ift_data <- read_excel(path = "data/ift_data.xlsx")
ift_data
model_int <- lm(IFT ~ Water_content + time_minutes, data = ift_data)
tidy(model_int)
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = time_minutes, y = IFT, color = Gas)) +
geom_point() +
geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = time_minutes, y = IFT, color = Water_content)) +
geom_point() +
geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
#geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
model_int <- lm(IFT ~ Water_content*time_minutes, data = ift_data)
tidy(model_int)
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
#geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
geom_line(aes(y = pred_add), size = 1) +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
labs(title = 'Depression treatment effectiveness',
x = "Age (years)",
y = "Treatment effectiveness") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ift_data$pred_add = predict(model_int)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
labs(title = 'Effect of water content and type of Gas in IFT',
x = "Water Content",
y = "IFT") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
model_int <- lm(scale(IFT) ~ Water_content*time_minutes, data = ift_data)
tidy(model_int)
model_int <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
tidy(model_int)
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
tidy(model_ift)
ift_data$pred_add = predict(model_ift)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
labs(title = 'Effect of water content and type of Gas in IFT',
x = "Water Content",
y = "IFT") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_ift <- lm(scale(volume ratio) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_vol <- lm(scale(volume ratio) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
ift_data <- read_excel(path = "data/ift_data.xlsx")
ift_data
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_vol <- lm(scale(volume ratio) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_vol <- lm(scale(volume_ratio) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
tidy(volume_ratio)
tidy(model_vol)
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_vol <- lm(volume_ratio ~ Water_content*time_minutes, data = ift_data)
tidy(model_vol)
ggplot(ift_data, aes(time_minutes, IFT) ) +
geom_point() +
stat_smooth()
ggplot(ift_data, aes(Water_content, IFT) ) +
geom_point() +
stat_smooth()
ggplot(ift_data, aes(Water_content, IFT) ) +
geom_point(color = Gas) +
stat_smooth()
ggplot(ift_data, aes(Water_content, IFT,color = Gas) ) +
geom_point() +
stat_smooth()
ift_data <- read_excel(path = "data/ift_data.xlsx")
ift_data
ggplot(ift_data, aes(Water_content, IFT,color = Gas) ) +
geom_point() +
stat_smooth()
model_ift <- lm(scale(IFT) ~ scale(Water_content)*scale(time_minutes), data = ift_data)
model_vol <- lm(volume_ratio ~ Water_content*time_minutes, data = ift_data)
tidy(model_vol)
ift_data$pred_add = predict(model_ift)
ggplot(ift_data, aes(x = Water_content, y = IFT, color = Gas)) +
geom_point() +
labs(title = 'Effect of water content and type of Gas in IFT',
x = "Water Content",
y = "IFT") +
theme(plot.title = element_text(face = "bold", size = 12, hjust = 0.5),
axis.title = element_text(face = "bold", size = 12))
ggplot(ift_data, aes(Water_content, IFT,color = Gas) ) +
geom_point() +
stat_smooth()
